#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 19 10:52:21 2020

@author: sid vijay
"""

# Importing the libraries
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error
from statistics import mean

response_data2 = pd.read_csv('Huh7_WT_Fzd2.csv')
drug_list2 = response_data2.iloc[:, 0].values
alldrugs2 = pd.read_csv('kir_allDrugs_namesDoses.csv', encoding='latin1')

alldrugs2 = alldrugs2.set_index('compound')
dataset2 = alldrugs2.loc[drug_list2]
response2 = response_data2['Huh7_Fzd2'].values
dataset2["response"] = response2

# Importing the dataset
X = dataset2.iloc[:, 0:298].values
y = dataset2.iloc[:, 298].values

X_df = pd.DataFrame(X, index = dataset2.index.tolist(), columns = alldrugs2.columns.tolist())
y_df = pd.DataFrame(y)

kinase_list = alldrugs2.columns.tolist()

def build_classifier():
    classifier = Sequential()
    classifier.add(Dense(units = 100, kernel_initializer = 'TruncatedNormal', activation = 'relu', input_dim = 298))
    classifier.add(Dense(units = 100, kernel_initializer = 'TruncatedNormal', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'TruncatedNormal' )) 
    classifier.compile(loss = 'mean_squared_error', optimizer='adam')
    return classifier

classifier = build_classifier()   
classifier.fit(X,y, epochs=80, batch_size=44)

results = []


y_pred_base = classifier.predict(X)
y_true = y.tolist()
base_score = mean_squared_error(y_pred_base, y_true)
for kinase_number in range(len(X[0])):
    error_increase_list = []
    X_copy = np.copy(X)
    for shuffle_number in range (10000):
        np.random.shuffle(X_copy[:,kinase_number])
        y_pred_new = classifier.predict(X_copy)
        new_score = mean_squared_error(y_pred_new, y_true)
        error_increase = new_score - base_score
        error_increase_list.append(error_increase)
    mean_error = mean(error_increase_list)
    results.append([kinase_list[kinase_number], mean_error])
    print(kinase_number)
    
print(results)


for num in range(30):
    def build_classifier():
        classifier = Sequential()
        classifier.add(Dense(units = 100, kernel_initializer = 'TruncatedNormal', activation = 'relu', input_dim = 298))
        classifier.add(Dense(units = 100, kernel_initializer = 'TruncatedNormal', activation = 'relu'))
        classifier.add(Dense(units = 1, kernel_initializer = 'TruncatedNormal' )) 
        classifier.compile(loss = 'mean_squared_error', optimizer='adam')
        return classifier
    classifier = build_classifier()   
    classifier.fit(X,y, epochs=80, batch_size=44)
    y_pred_base = classifier.predict(X)
    y_true = y.tolist()
    base_score = mean_squared_error(y_pred_base, y_true)
    for kinase_number in range(len(X[0])):
        error_increase_list = []
        X_copy = np.copy(X)
        for shuffle_number in range (10000):
            np.random.shuffle(X_copy[:,kinase_number])
            y_pred_new = classifier.predict(X_copy)
            new_score = mean_squared_error(y_pred_new, y_true)
            error_increase = new_score - base_score
            error_increase_list.append(error_increase)
        mean_error = mean(error_increase_list)
        results.append([kinase_list[kinase_number], mean_error])
        print(kinase_number)
            
    
